#+TITLE: LLM Game Director Project
#+AUTHOR: mg
#+DATE: [[<2025-05-24 Sat>]]
#+OPTIONS: toc:nil num:nil

* LLM Game Director
  This experiment has Gemini generating code for a turn-based game played by a squad of LLMs.

  This project implements a Clojure-based system for designing and simulating
  turn-based games using Large Language Models (LLMs) as agents. A "Planner" LLM
  designs the game, and "Player" LLMs play it, orchestrated by a central
  "Director" program.

* Features
  - LLM-driven dynamic game design.
  - Turn-based gameplay simulation with multiple LLM player agents.
  - Persistence of game designs to the filesystem for reusability.
  - Interaction with LLMs via a configurable LiteLLM endpoint.
  - Simulation mode for development and testing without live LLM calls.
  - Command-line interface for operation.
  - Modular architecture for maintainability and testability.

* Project Structure
#+BEGIN_EXAMPLE
.
├── deps.edn                     ; Project dependencies
├── game_designs/                ; Default directory for saved game designs
│   └── [game_id]/               ; Each game design gets its own subdirectory
│       ├── initial_state.json
│       ├── game_meta.json
│       ├── PlayerA.txt          ; Example player instruction file
│       └── ...
├── planner_prompts/             ; Directory for planner prompt text files
│   └── roberts_rules_planner_prompt.txt ; Example default planner prompt
├── docs/                        ; Project documentation
│   ├── DESIGN.org               ; The design document
│   ├── prompt-1.org             ; the first prompt I gave it
│   └── prompt-2.org             ; the revised prompt rewritten by Gemini
├── src/
│   └── director/
│       ├── core.clj             ; Main application logic, CLI parsing
│       ├── llm_interface.clj    ; Interface for real LLM calls (via LiteLLM)
│       ├── persistence.clj      ; Saving and loading game designs
│       ├── planning.clj         ; Game design phase logic
│       ├── play.clj             ; Game play phase logic
│       ├── simulation.clj       ; Simulated LLM responses
│       └── util.clj             ; Utility functions (parsing, sanitization)
└── test/
    └── director/
        ├── persistence_test.clj ; Unit tests for persistence
        ├── planning_test.clj    ; Unit tests for planning
        ├── play_test.clj        ; Unit tests for play
        └── util_test.clj        ; Unit tests for utilities
#+END_EXAMPLE

* Documentation
  - [[./docs/DESIGN.org][Full Design Document]]: Detailed information about the system architecture, components, data flow, and workflows.
  - [[./docs/PROMPTS.org][LLM Prompts]]: Examples and discussion of the prompts used for the Planner and Player agents. (Alternatively, link to individual prompt files if preferred).

* Prerequisites
  - Java Development Kit (JDK), version 11 or higher (Java 21 tested).
  - [[https://clojure.org/guides/getting_started][Clojure CLI tools]] (version 1.12.x tested).
  - [[https://docs.litellm.ai/docs/][LiteLLM]] running and configured to serve the desired LLM models (e.g., via Ollama, OpenAI).
    - Default endpoint expected by this application: =http://localhost:8000/chat/completions= (configurable in =src/director/llm_interface.clj=).
    - Example planner model: =openai/gpt-3.5-turbo=
    - Example player model: =ollama/mistral=

* Setup
  1. Clone the repository.
  2. Ensure LiteLLM is running and configured with the models specified in =src/director/core.clj= (e.g., =planner-model-name-config=, =default-player-model-name-config=). Refer to LiteLLM documentation for setup.
  3. Create the base directory for game designs if it doesn't exist (defaults to =./game_designs/=).
     #+BEGIN_SRC bash
     mkdir -p game_designs
     #+END_SRC
  4. Ensure a planner prompt file exists (e.g., =planner_prompts/roberts_rules_planner_prompt.txt=).

* Running the Application
  The application is run from the command line using the Clojure CLI.

**  Running with Real LLMs:
#+BEGIN_SRC bash
clojure -M -m director.core
#+END_SRC
   This will use the default planner prompt and attempt to connect to LiteLLM.

**  Forcing Re-planning:
#+BEGIN_SRC bash
clojure -M -m director.core -f
# or
clojure -M -m director.core --force-plan
#+END_SRC

**  Using a Specific Planner Prompt:
#+BEGIN_SRC bash
clojure -M -m director.core -p path/to/your_planner_prompt.txt
#+END_SRC

**  Running in Simulation Mode (No LLM Calls):
#+BEGIN_SRC bash
clojure -M -m director.core -s
# or
clojure -M -m director.core --simulate
#+END_SRC
   Simulation mode uses pre-canned responses for a specific game scenario (currently Robert's Rules).

**  Help:
#+BEGIN_SRC bash
clojure -M -m director.core -h
# or
clojure -M -m director.core --help
#+END_SRC

* Running Tests
  The project uses Cognitect's test runner.
#+BEGIN_SRC bash
clojure -X:test
#+END_SRC
  This will execute all unit tests located in the =test/= directory.

* Key Configuration Files/Variables
  - =deps.edn=: Project dependencies and test runner alias.
  - =src/director/core.clj=:
    - =game-designs-actual-base-dir=: Base path for saved game designs.
    - =default-planner-prompt-file=: Default planner prompt.
    - =planner-model-name-config=: Model name for the planner agent.
    - =default-player-model-name-config=: Model name for player agents.
  - =src/director/llm_interface.clj=:
    - =LITELLM_ENDPOINT=: URL of your LiteLLM service.

* Contributing
  (Placeholder for contribution guidelines if this were an open project)

* License
  (Placeholder for license information, e.g., MIT, Apache 2.0)
