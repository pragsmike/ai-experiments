You are an expert game designer LLM. Your task is to design a game based on the specifications provided and output the design as a single JSON object.

**Game Concept:**
A negotiation game for three players: "Chair", "PlayerA", and "PlayerB".
The game follows a simplified version of Robert's Rules of Order.
The objective is to decide on the allotment of 100 indivisible coins among PlayerA and PlayerB. The Chair does not receive coins but facilitates the meeting.

**Output Format:**
You MUST produce a single JSON object. This JSON object will have three top-level keys: "game_title", "initial_game_state", and "player_instructions".

1.  **`game_title` (String):**
    A descriptive title for the game. E.g., "Roberts Rules Coin Allotment".

2.  **`initial_game_state` (JSON Object):**
    This object represents the starting state of the game. It MUST include the following fields:
    *   `game_id` (String): A unique ID for this game type, e.g., "roberts_rules_coin_v1".
    *   `description` (String): A brief description of the game's premise.
    *   `players` (Array of Strings): List of player IDs: ["Chair", "PlayerA", "PlayerB"].
    *   `agenda_item` (String): The main topic, e.g., "Allot 100 coins between PlayerA and PlayerB."
    *   `coins_to_allot` (Integer): The total number of coins, e.g., 100.
    *   `allotted_coins` (JSON Object): Initial coin distribution, e.g., `{"PlayerA": 0, "PlayerB": 0}`.
    *   `current_phase` (String): The initial phase of the game, e.g., "MeetingOpened" or "AwaitingMotions".
    *   `current_motion` (Null or JSON Object): Initially null. If a motion is active, it should be an object like: `{"text": "Motion details", "moved_by": "PlayerID", "seconded_by": "PlayerID_or_null", "status": "proposed/seconded/voting/passed/failed"}`.
    *   `secondary_motion` (Null or JSON Object): For procedural motions like "move to vote", similar structure to `current_motion`.
    *   `dialog_history` (Array of JSON Objects): An array to store the conversation. Start it with an initial system message, e.g., `[{"speaker": "System", "line": "Game Start. Agenda: Allot 100 coins between PlayerA and PlayerB. The Chair has the floor."}]`.
    *   `next_player_to_act` (String): The ID of the player who should act first. This should usually be "Chair".
    *   `votes` (JSON Object): To store vote counts, e.g., initially `{}`. Can be structured like `{"motion_id_or_description": {"PlayerA": "Aye", "PlayerB": "Nay"}}`.

3.  **`player_instructions` (JSON Object):**
    A map where keys are player IDs ("Chair", "PlayerA", "PlayerB") and values are detailed string instructions for that player.
    Each player's instruction string MUST clearly explain:
    *   Their specific role and general objective in the game.
    *   That on their turn, they will receive the full current game state as a JSON string.
    *   That they MUST respond with a single JSON string containing two keys:
        1.  `"utterance"`: A string for their natural language speech for the turn (e.g., "I move that PlayerA gets 60 coins.").
        2.  `"new_game_state"`: The complete, updated JSON game state object after their action.
    *   How to update the `new_game_state`:
        *   They MUST append their own utterance to the `dialog_history` array as an object: `{"speaker": "TheirPlayerID", "line": "Their Utterance"}`.
        *   They MUST correctly update game-specific fields like `current_phase`, `current_motion` (if they make/second/vote on one), `secondary_motion`, `allotted_coins` (if a motion passes and allocates coins), and `votes`.
        *   CRITICALLY, they MUST determine and set the `next_player_to_act` field in `new_game_state` according to simplified Robert's Rules. For example:
            *   Chair usually speaks to open, guide, or call votes.
            *   After a player makes a motion, the turn usually goes to the Chair to ask for a second.
            *   If the Chair asks for a second, any other player (e.g., PlayerB if PlayerA moved) might take a turn to second.
            *   During voting, players vote sequentially as called by the Chair.
            *   If their action concludes the game (e.g., Chair adjourning after a successful motion on the agenda item), `next_player_to_act` should be set to `null`.
    *   **Specific Instructions for Roles:**
        *   **Chair:** Objective is to facilitate the meeting to resolve the agenda item according to simplified Robert's Rules. Manage turns, recognize speakers, call for motions, seconds, discussion, and votes. Announce results. Adjourn when the agenda is resolved. Does not make motions on the main agenda item or vote on it (unless to break a tie, but simplify to not vote). Can vote on procedural motions (like "move to vote").
        *   **PlayerA & PlayerB:** Objective is to maximize their own coin allotment. They can make motions, second motions, discuss, and vote. A motion could be, e.g., "PlayerA gets X coins, PlayerB gets Y coins" (where X+Y <= 100).

Remember, the player LLMs will rely entirely on YOUR generated instructions and the game state to act correctly and produce valid JSON. Be very clear and precise in the player instructions, especially regarding JSON manipulation and turn progression.

Produce ONLY the single JSON object as described. Do not include any other explanatory text before or after the JSON object.
