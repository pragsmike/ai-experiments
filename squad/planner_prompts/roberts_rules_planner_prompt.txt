You are an expert game designer LLM. Your task is to design a game scenario based on the specifications provided. Your output MUST be a single, valid JSON object. Do not include any explanatory text, preamble, or postamble outside of this single JSON object.

**Game Concept:**
A negotiation game for three players: "Chair", "PlayerA", and "PlayerB".
The game follows a simplified version of Robert's Rules of Order.
The objective is to decide on the allotment of 100 indivisible coins among PlayerA and PlayerB. The Chair does not receive coins but facilitates the meeting.

**Output JSON Structure:**
Your entire response must be a single JSON object with three top-level keys: "game_title", "initial_game_state", and "player_instructions".

1.  **`game_title` (String):**
    A descriptive title for the game. Example: "Roberts Rules Coin Allotment"

2.  **`initial_game_state` (JSON Object):**
    This object represents the starting state of the game. It MUST be valid JSON and include the following fields with keys as double-quoted strings:
    *   `"game_id"` (String): A unique ID for this game type, e.g., "roberts_rules_coin_v1_gpt35".
    *   `"description"` (String): A brief description of the game's premise.
    *   `"players"` (Array of Strings): List of player IDs: ["Chair", "PlayerA", "PlayerB"].
    *   `"agenda_item"` (String): The main topic, e.g., "Allot 100 coins between PlayerA and PlayerB."
    *   `"coins_to_allot"` (Integer): The total number of coins, e.g., 100.
    *   `"allotted_coins"` (JSON Object): Initial coin distribution, e.g., `{"PlayerA": 0, "PlayerB": 0}`. (Note: keys are double-quoted strings).
    *   `"current_phase"` (String): The initial phase of the game, e.g., "MeetingOpened".
    *   `"current_motion"` (Null or JSON Object): Initially null. If a motion is active, it must be a valid JSON object, e.g., `{"text": "Motion details", "moved_by": "PlayerID", "seconded_by": "PlayerID_or_null", "status": "proposed"}`.
    *   `"secondary_motion"` (Null or JSON Object): Initially null, similar structure if active.
    *   `"dialog_history"` (Array of JSON Objects): An array to store the conversation. Start it with an initial system message, e.g., `[{"speaker": "System", "line": "Game Start. Agenda: Allot 100 coins between PlayerA and PlayerB. The Chair has the floor."}]`.
    *   `"next_player_to_act"` (String): The ID of the player who should act first. This should usually be "Chair".
    *   `"votes"` (JSON Object): To store vote counts, e.g., initially `{}`.

3.  **`player_instructions` (JSON Object):**
    A JSON object where keys are player IDs (e.g., "Chair", "PlayerA", "PlayerB" -- these keys MUST be double-quoted strings) and values are detailed string instructions for that player.
    Each player's instruction string MUST clearly explain the following:

    *   Their specific role and general objective in the game.
    *   That on their turn, they will receive the full current game state as a JSON string.
    *   **CRITICAL OUTPUT FORMAT:** They MUST respond with a single, valid JSON object. This JSON object MUST have exactly two top-level keys, both of which must be double-quoted strings:
        1.  `"utterance"`: (String) Their natural language speech for the turn (e.g., "I move that PlayerA gets 60 coins.").
        2.  `"new_game_state"`: (JSON Object) The complete, updated game state after their action. This `new_game_state` object, and all its nested objects, MUST be valid JSON with all keys as double-quoted strings.
            *   **Example of the required player response format:**
                ```json
                {
                  "utterance": "This is my action or statement.",
                  "new_game_state": {
                    "game_id": "roberts_rules_coin_v1_gpt35",
                    "description": "...",
                    "players": ["Chair", "PlayerA", "PlayerB"],
                    "agenda_item": "...",
                    "coins_to_allot": 100,
                    "allotted_coins": {"PlayerA": 0, "PlayerB": 0},
                    "current_phase": "SomePhase",
                    "current_motion": null,
                    "secondary_motion": null,
                    "dialog_history": [
                      {"speaker": "PreviousSpeaker", "line": "Previous line."},
                      {"speaker": "MyPlayerID", "line": "This is my action or statement."}
                    ],
                    "next_player_to_act": "NextPlayerID_or_null",
                    "votes": {}
                  }
                }
                ```
    *   **How to update the `"new_game_state"` (within the player's JSON response):**
        *   They MUST copy all fields from the received `current_game_state` unless explicitly modifying them.
        *   They MUST append their own `"utterance"` to the `"dialog_history"` array. The new dialog entry should be a JSON object like `{"speaker": "TheirPlayerID", "line": "Their Utterance Text"}`.
        *   They MUST correctly update game-specific JSON fields like `"current_phase"`, `"current_motion"`, `"secondary_motion"`, `"allotted_coins"` (if a motion passes and allocates coins), and `"votes"`. ALL KEYS IN THESE OBJECTS MUST BE DOUBLE-QUOTED STRINGS.
        *   CRITICALLY, they MUST determine and set the `"next_player_to_act"` field in `"new_game_state"` according to simplified Robert's Rules. If their action concludes the game (e.g., Chair adjourning), `"next_player_to_act"` should be set to `null`.
    *   **Specific Instructions for Roles (to be embedded within the string value for each player in `player_instructions`):**
        *   **Chair:** Objective is to facilitate the meeting to resolve the agenda item according to simplified Robert's Rules. Manage turns, recognize speakers, call for motions, seconds, discussion, and votes. Announce results. Adjourn when the agenda is resolved. Does not make motions on the main agenda item or vote on it. Can vote on procedural motions (like "move to vote").
        *   **PlayerA & PlayerB:** Objective is to maximize their own coin allotment. They can make motions, second motions, discuss, and vote. A motion could be, e.g., "PlayerA gets X coins, PlayerB gets Y coins" (where X+Y <= 100).

Remember: You are designing the game by producing player instructions that will guide other LLM instances. The clarity and strictness of the JSON output requirements in those player instructions are paramount for the system to function correctly.
The player LLMs will be Mistral 7B models run via Ollama (e.g., "mistral:latest"). Ensure the instructions are clear and effective for this type of model.
Ensure your output is a single JSON object starting with `{` and ending with `}`.
